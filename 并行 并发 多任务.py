多进程：可以充分利用多核CPU的资源，适用于密集CPU任务（大量的并行运算）

-----进程之间通信成本高切换开销大，不适用于需要大量数据通信和切换的任务（爬虫）

	
多线程：适用于密集I/O任务（磁盘IO，内存IO，网络IO），切换开销小通信成本低。
Python的多线程：Thread、thraeding、multiprocessing.dummy

------同一个时间片只能执行一个线程，无法充分利用CPU多核资源（只能做到并发，不能做到并行）



协程：操作系统和CPU不认识协程，是由程序员通过代码逻辑控制。
特点是在单线程下执行多个任务，且不需要通过操作系统切换（没有切换开销，也不需要处理锁），执行效率高。

Python: gevent ，猴子补丁（Python代码在执行网络IO阻塞时，会自动切换协程）

    协程：适用于密集网络I/O任务



多进程爬虫：不合适
多线程爬虫：缺点 - 通过操作系统调度，有线程切换开销（海量URLs场景会增加CPU负载）；优点 - 使用场景广泛（网络读写并发/数据库读写并发/磁盘读写并发）
协程爬虫：缺点 - gevent配合monkey.patch_all() 只能提高网络并发效率，不能处理其他并发场景；
		  优点 - 通过程序员代码逻辑控制，不受操作系统调度，没有切换开销，降低CPU负载（处理海量URLs优势明显）

并发:有处理多个任务的能力, 不一定要同时.
并行:有同时处理多个任务的能力.

多个线程或进程的并发程序,如果没有多核处理器来运行这个程序,
那就不能以并行的方式来运行代码.

目前python解释器是cpython实现python所以就饶不开GIL锁
线程在运行的时候就会占着这个python.
GIL（全局解释器锁）：保证一个时间片里只有一个线程在运行。
好处: 直接杜绝了多个线程的竞争问题
坏处: Python的多线程不是真正多线程

python通过多进程实现多并行，充分利用多处理器
，弥补了语言层面不支持多并行的缺点。
一个解释器只能处理一段程序的问题


事务---innodb

原子性，一致性:不commit原始数据库数据就不会被修改  or rollback
隔离性:对一个数据同时做修改的时候，一边开启后修改，另外一边也开启修改但是修改该数据的时候会堵塞不动。
持久性:数据一旦修改，所做的修改会永久保存到数据库.


